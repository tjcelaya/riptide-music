~~~Basic SQL Queries~~~

!!!Remember to "quote" your strings!!!

~ADDING AN ARTIST~

Artists are inserted into the Artists table, which has schema:
artistID - artistName - artistGenres

  INSERT INTO Artists
  VALUES (<artistID>, "<artistName", <genre>);

Albums are inserted into the Albums table with schema:
albumID - artistID - albumName - released - avgRating - tracklist - imageURL

Since you may not always have all this information upon initial insertion,
you can specify which fields you are including in the insertion.
For example, if you only had the album's name and artist...

  INSERT INTO Albums (albumID, artistID, albumName)
  VALUES (<albumID>, <artistID>, "<albumName>");

*NOTE*
For now, if you're adding a new album or artist, just add it as the next
sequential ID. I'm pretty sure there's a way to automate this, so I'll be
looking into that.

~ADDING A REVIEW FOR AN ALBUM~

The review is inserted into the Reviews table, which has schema:
memName - albumID - review

Because this schema calls for albumID, rather than albumName,
you can use this nested SQL query to find the albumID using the
albumName.

You will need:
1. The name of the member submitting the review.
2. The name of the album they are reviewing.
3. The review represented as a string.

  INSERT INTO Reviews
  VALUES ("<memName>", (SELECT albumID
                      FROM Albums 
                      WHERE albumName = "<albumName>"),
          "<Review text>");

~ADDING A RATING FOR AN ALBUM~

The rating is inserted into the Rates table, which has schema:
memName - albumID - rating

This query is implemented just like the other one, only the
integer rating will replace the text review.

You will need:
1. The name of the member submitting the rating.
2. The name of the album they are rating.
3. The rating represented as an integer.

  INSERT INTO Rates
  VALUES ("<memName>", (SELECT albumID
                      FROM Albums
                      WHERE albumName = "<albumName>"),
          <rating>);
